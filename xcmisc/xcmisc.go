package xcmisc

/*
	This file was generated by xc_misc.xml on May 10 2012 4:20:28pm EDT.
	This file is automatically generated. Edit at your peril!
*/

import (
	"github.com/BurntSushi/xgb"

	"github.com/BurntSushi/xgb/xproto"
)

// Init must be called before using the XC-MISC extension.
func Init(c *xgb.Conn) error {
	reply, err := xproto.QueryExtension(c, 7, "XC-MISC").Reply()
	switch {
	case err != nil:
		return err
	case !reply.Present:
		return xgb.Errorf("No extension named XC-MISC could be found on on the server.")
	}

	xgb.ExtLock.Lock()
	c.Extensions["XC-MISC"] = reply.MajorOpcode
	for evNum, fun := range xgb.NewExtEventFuncs["XC-MISC"] {
		xgb.NewEventFuncs[int(reply.FirstEvent)+evNum] = fun
	}
	for errNum, fun := range xgb.NewExtErrorFuncs["XC-MISC"] {
		xgb.NewErrorFuncs[int(reply.FirstError)+errNum] = fun
	}
	xgb.ExtLock.Unlock()

	return nil
}

func init() {
	xgb.NewExtEventFuncs["XC-MISC"] = make(map[int]xgb.NewEventFun)
	xgb.NewExtErrorFuncs["XC-MISC"] = make(map[int]xgb.NewErrorFun)
}

// Skipping definition for base type 'Card8'

// Skipping definition for base type 'Int16'

// Skipping definition for base type 'Int32'

// Skipping definition for base type 'Void'

// Skipping definition for base type 'Byte'

// Skipping definition for base type 'Int8'

// Skipping definition for base type 'Card16'

// Skipping definition for base type 'Char'

// Skipping definition for base type 'Card32'

// Skipping definition for base type 'Double'

// Skipping definition for base type 'Bool'

// Skipping definition for base type 'Float'

// Request GetVersion
// size: 8
type GetVersionCookie struct {
	*xgb.Cookie
}

func GetVersion(c *xgb.Conn, ClientMajorVersion uint16, ClientMinorVersion uint16) GetVersionCookie {
	cookie := c.NewCookie(true, true)
	c.NewRequest(getVersionRequest(c, ClientMajorVersion, ClientMinorVersion), cookie)
	return GetVersionCookie{cookie}
}

func GetVersionUnchecked(c *xgb.Conn, ClientMajorVersion uint16, ClientMinorVersion uint16) GetVersionCookie {
	cookie := c.NewCookie(false, true)
	c.NewRequest(getVersionRequest(c, ClientMajorVersion, ClientMinorVersion), cookie)
	return GetVersionCookie{cookie}
}

// Request reply for GetVersion
// size: 12
type GetVersionReply struct {
	Sequence uint16
	Length   uint32
	// padding: 1 bytes
	ServerMajorVersion uint16
	ServerMinorVersion uint16
}

// Waits and reads reply data from request GetVersion
func (cook GetVersionCookie) Reply() (*GetVersionReply, error) {
	buf, err := cook.Cookie.Reply()
	if err != nil {
		return nil, err
	}
	if buf == nil {
		return nil, nil
	}
	return getVersionReply(buf), nil
}

// Read reply into structure from buffer for GetVersion
func getVersionReply(buf []byte) *GetVersionReply {
	v := new(GetVersionReply)
	b := 1 // skip reply determinant

	b += 1 // padding

	v.Sequence = xgb.Get16(buf[b:])
	b += 2

	v.Length = xgb.Get32(buf[b:]) // 4-byte units
	b += 4

	v.ServerMajorVersion = xgb.Get16(buf[b:])
	b += 2

	v.ServerMinorVersion = xgb.Get16(buf[b:])
	b += 2

	return v
}

// Write request to wire for GetVersion
func getVersionRequest(c *xgb.Conn, ClientMajorVersion uint16, ClientMinorVersion uint16) []byte {
	size := 8
	b := 0
	buf := make([]byte, size)

	buf[b] = c.Extensions["XC-MISC"]
	b += 1

	buf[b] = 0 // request opcode
	b += 1

	xgb.Put16(buf[b:], uint16(size/4)) // write request size in 4-byte units
	b += 2

	xgb.Put16(buf[b:], ClientMajorVersion)
	b += 2

	xgb.Put16(buf[b:], ClientMinorVersion)
	b += 2

	return buf
}

// Request GetXIDRange
// size: 4
type GetXIDRangeCookie struct {
	*xgb.Cookie
}

func GetXIDRange(c *xgb.Conn) GetXIDRangeCookie {
	cookie := c.NewCookie(true, true)
	c.NewRequest(getXIDRangeRequest(c), cookie)
	return GetXIDRangeCookie{cookie}
}

func GetXIDRangeUnchecked(c *xgb.Conn) GetXIDRangeCookie {
	cookie := c.NewCookie(false, true)
	c.NewRequest(getXIDRangeRequest(c), cookie)
	return GetXIDRangeCookie{cookie}
}

// Request reply for GetXIDRange
// size: 16
type GetXIDRangeReply struct {
	Sequence uint16
	Length   uint32
	// padding: 1 bytes
	StartId uint32
	Count   uint32
}

// Waits and reads reply data from request GetXIDRange
func (cook GetXIDRangeCookie) Reply() (*GetXIDRangeReply, error) {
	buf, err := cook.Cookie.Reply()
	if err != nil {
		return nil, err
	}
	if buf == nil {
		return nil, nil
	}
	return getXIDRangeReply(buf), nil
}

// Read reply into structure from buffer for GetXIDRange
func getXIDRangeReply(buf []byte) *GetXIDRangeReply {
	v := new(GetXIDRangeReply)
	b := 1 // skip reply determinant

	b += 1 // padding

	v.Sequence = xgb.Get16(buf[b:])
	b += 2

	v.Length = xgb.Get32(buf[b:]) // 4-byte units
	b += 4

	v.StartId = xgb.Get32(buf[b:])
	b += 4

	v.Count = xgb.Get32(buf[b:])
	b += 4

	return v
}

// Write request to wire for GetXIDRange
func getXIDRangeRequest(c *xgb.Conn) []byte {
	size := 4
	b := 0
	buf := make([]byte, size)

	buf[b] = c.Extensions["XC-MISC"]
	b += 1

	buf[b] = 1 // request opcode
	b += 1

	xgb.Put16(buf[b:], uint16(size/4)) // write request size in 4-byte units
	b += 2

	return buf
}

// Request GetXIDList
// size: 8
type GetXIDListCookie struct {
	*xgb.Cookie
}

func GetXIDList(c *xgb.Conn, Count uint32) GetXIDListCookie {
	cookie := c.NewCookie(true, true)
	c.NewRequest(getXIDListRequest(c, Count), cookie)
	return GetXIDListCookie{cookie}
}

func GetXIDListUnchecked(c *xgb.Conn, Count uint32) GetXIDListCookie {
	cookie := c.NewCookie(false, true)
	c.NewRequest(getXIDListRequest(c, Count), cookie)
	return GetXIDListCookie{cookie}
}

// Request reply for GetXIDList
// size: (32 + xgb.Pad((int(IdsLen) * 4)))
type GetXIDListReply struct {
	Sequence uint16
	Length   uint32
	// padding: 1 bytes
	IdsLen uint32
	// padding: 20 bytes
	Ids []uint32 // size: xgb.Pad((int(IdsLen) * 4))
}

// Waits and reads reply data from request GetXIDList
func (cook GetXIDListCookie) Reply() (*GetXIDListReply, error) {
	buf, err := cook.Cookie.Reply()
	if err != nil {
		return nil, err
	}
	if buf == nil {
		return nil, nil
	}
	return getXIDListReply(buf), nil
}

// Read reply into structure from buffer for GetXIDList
func getXIDListReply(buf []byte) *GetXIDListReply {
	v := new(GetXIDListReply)
	b := 1 // skip reply determinant

	b += 1 // padding

	v.Sequence = xgb.Get16(buf[b:])
	b += 2

	v.Length = xgb.Get32(buf[b:]) // 4-byte units
	b += 4

	v.IdsLen = xgb.Get32(buf[b:])
	b += 4

	b += 20 // padding

	v.Ids = make([]uint32, v.IdsLen)
	for i := 0; i < int(v.IdsLen); i++ {
		v.Ids[i] = xgb.Get32(buf[b:])
		b += 4
	}
	b = xgb.Pad(b)

	return v
}

// Write request to wire for GetXIDList
func getXIDListRequest(c *xgb.Conn, Count uint32) []byte {
	size := 8
	b := 0
	buf := make([]byte, size)

	buf[b] = c.Extensions["XC-MISC"]
	b += 1

	buf[b] = 2 // request opcode
	b += 1

	xgb.Put16(buf[b:], uint16(size/4)) // write request size in 4-byte units
	b += 2

	xgb.Put32(buf[b:], Count)
	b += 4

	return buf
}
