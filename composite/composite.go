// Package composite is the X client API for the Composite extension.
package composite

/*
	This file was generated by composite.xml on May 10 2012 8:04:31pm EDT.
	This file is automatically generated. Edit at your peril!
*/

import (
	"github.com/BurntSushi/xgb"

	"github.com/BurntSushi/xgb/xfixes"
	"github.com/BurntSushi/xgb/xproto"
)

// Init must be called before using the Composite extension.
func Init(c *xgb.Conn) error {
	reply, err := xproto.QueryExtension(c, 9, "Composite").Reply()
	switch {
	case err != nil:
		return err
	case !reply.Present:
		return xgb.Errorf("No extension named Composite could be found on on the server.")
	}

	xgb.ExtLock.Lock()
	c.Extensions["Composite"] = reply.MajorOpcode
	for evNum, fun := range xgb.NewExtEventFuncs["Composite"] {
		xgb.NewEventFuncs[int(reply.FirstEvent)+evNum] = fun
	}
	for errNum, fun := range xgb.NewExtErrorFuncs["Composite"] {
		xgb.NewErrorFuncs[int(reply.FirstError)+errNum] = fun
	}
	xgb.ExtLock.Unlock()

	return nil
}

func init() {
	xgb.NewExtEventFuncs["Composite"] = make(map[int]xgb.NewEventFun)
	xgb.NewExtErrorFuncs["Composite"] = make(map[int]xgb.NewErrorFun)
}

// Skipping definition for base type 'Card8'

// Skipping definition for base type 'Int16'

// Skipping definition for base type 'Int32'

// Skipping definition for base type 'Void'

// Skipping definition for base type 'Byte'

// Skipping definition for base type 'Int8'

// Skipping definition for base type 'Card16'

// Skipping definition for base type 'Char'

// Skipping definition for base type 'Card32'

// Skipping definition for base type 'Double'

// Skipping definition for base type 'Bool'

// Skipping definition for base type 'Float'

const (
	RedirectAutomatic = 0
	RedirectManual    = 1
)

// Request QueryVersion
// size: 12
type QueryVersionCookie struct {
	*xgb.Cookie
}

func QueryVersion(c *xgb.Conn, ClientMajorVersion uint32, ClientMinorVersion uint32) QueryVersionCookie {
	cookie := c.NewCookie(true, true)
	c.NewRequest(queryVersionRequest(c, ClientMajorVersion, ClientMinorVersion), cookie)
	return QueryVersionCookie{cookie}
}

func QueryVersionUnchecked(c *xgb.Conn, ClientMajorVersion uint32, ClientMinorVersion uint32) QueryVersionCookie {
	cookie := c.NewCookie(false, true)
	c.NewRequest(queryVersionRequest(c, ClientMajorVersion, ClientMinorVersion), cookie)
	return QueryVersionCookie{cookie}
}

// Request reply for QueryVersion
// size: 32
type QueryVersionReply struct {
	Sequence uint16
	Length   uint32
	// padding: 1 bytes
	MajorVersion uint32
	MinorVersion uint32
	// padding: 16 bytes
}

// Waits and reads reply data from request QueryVersion
func (cook QueryVersionCookie) Reply() (*QueryVersionReply, error) {
	buf, err := cook.Cookie.Reply()
	if err != nil {
		return nil, err
	}
	if buf == nil {
		return nil, nil
	}
	return queryVersionReply(buf), nil
}

// Read reply into structure from buffer for QueryVersion
func queryVersionReply(buf []byte) *QueryVersionReply {
	v := new(QueryVersionReply)
	b := 1 // skip reply determinant

	b += 1 // padding

	v.Sequence = xgb.Get16(buf[b:])
	b += 2

	v.Length = xgb.Get32(buf[b:]) // 4-byte units
	b += 4

	v.MajorVersion = xgb.Get32(buf[b:])
	b += 4

	v.MinorVersion = xgb.Get32(buf[b:])
	b += 4

	b += 16 // padding

	return v
}

// Write request to wire for QueryVersion
func queryVersionRequest(c *xgb.Conn, ClientMajorVersion uint32, ClientMinorVersion uint32) []byte {
	size := 12
	b := 0
	buf := make([]byte, size)

	buf[b] = c.Extensions["COMPOSITE"]
	b += 1

	buf[b] = 0 // request opcode
	b += 1

	xgb.Put16(buf[b:], uint16(size/4)) // write request size in 4-byte units
	b += 2

	xgb.Put32(buf[b:], ClientMajorVersion)
	b += 4

	xgb.Put32(buf[b:], ClientMinorVersion)
	b += 4

	return buf
}

// Request RedirectWindow
// size: 12
type RedirectWindowCookie struct {
	*xgb.Cookie
}

// Write request to wire for RedirectWindow
func RedirectWindow(c *xgb.Conn, Window xproto.Window, Update byte) RedirectWindowCookie {
	cookie := c.NewCookie(false, false)
	c.NewRequest(redirectWindowRequest(c, Window, Update), cookie)
	return RedirectWindowCookie{cookie}
}

func RedirectWindowChecked(c *xgb.Conn, Window xproto.Window, Update byte) RedirectWindowCookie {
	cookie := c.NewCookie(true, false)
	c.NewRequest(redirectWindowRequest(c, Window, Update), cookie)
	return RedirectWindowCookie{cookie}
}

func (cook RedirectWindowCookie) Check() error {
	return cook.Cookie.Check()
}

// Write request to wire for RedirectWindow
func redirectWindowRequest(c *xgb.Conn, Window xproto.Window, Update byte) []byte {
	size := 12
	b := 0
	buf := make([]byte, size)

	buf[b] = c.Extensions["COMPOSITE"]
	b += 1

	buf[b] = 1 // request opcode
	b += 1

	xgb.Put16(buf[b:], uint16(size/4)) // write request size in 4-byte units
	b += 2

	xgb.Put32(buf[b:], uint32(Window))
	b += 4

	buf[b] = Update
	b += 1

	b += 3 // padding

	return buf
}

// Request RedirectSubwindows
// size: 12
type RedirectSubwindowsCookie struct {
	*xgb.Cookie
}

// Write request to wire for RedirectSubwindows
func RedirectSubwindows(c *xgb.Conn, Window xproto.Window, Update byte) RedirectSubwindowsCookie {
	cookie := c.NewCookie(false, false)
	c.NewRequest(redirectSubwindowsRequest(c, Window, Update), cookie)
	return RedirectSubwindowsCookie{cookie}
}

func RedirectSubwindowsChecked(c *xgb.Conn, Window xproto.Window, Update byte) RedirectSubwindowsCookie {
	cookie := c.NewCookie(true, false)
	c.NewRequest(redirectSubwindowsRequest(c, Window, Update), cookie)
	return RedirectSubwindowsCookie{cookie}
}

func (cook RedirectSubwindowsCookie) Check() error {
	return cook.Cookie.Check()
}

// Write request to wire for RedirectSubwindows
func redirectSubwindowsRequest(c *xgb.Conn, Window xproto.Window, Update byte) []byte {
	size := 12
	b := 0
	buf := make([]byte, size)

	buf[b] = c.Extensions["COMPOSITE"]
	b += 1

	buf[b] = 2 // request opcode
	b += 1

	xgb.Put16(buf[b:], uint16(size/4)) // write request size in 4-byte units
	b += 2

	xgb.Put32(buf[b:], uint32(Window))
	b += 4

	buf[b] = Update
	b += 1

	b += 3 // padding

	return buf
}

// Request UnredirectWindow
// size: 12
type UnredirectWindowCookie struct {
	*xgb.Cookie
}

// Write request to wire for UnredirectWindow
func UnredirectWindow(c *xgb.Conn, Window xproto.Window, Update byte) UnredirectWindowCookie {
	cookie := c.NewCookie(false, false)
	c.NewRequest(unredirectWindowRequest(c, Window, Update), cookie)
	return UnredirectWindowCookie{cookie}
}

func UnredirectWindowChecked(c *xgb.Conn, Window xproto.Window, Update byte) UnredirectWindowCookie {
	cookie := c.NewCookie(true, false)
	c.NewRequest(unredirectWindowRequest(c, Window, Update), cookie)
	return UnredirectWindowCookie{cookie}
}

func (cook UnredirectWindowCookie) Check() error {
	return cook.Cookie.Check()
}

// Write request to wire for UnredirectWindow
func unredirectWindowRequest(c *xgb.Conn, Window xproto.Window, Update byte) []byte {
	size := 12
	b := 0
	buf := make([]byte, size)

	buf[b] = c.Extensions["COMPOSITE"]
	b += 1

	buf[b] = 3 // request opcode
	b += 1

	xgb.Put16(buf[b:], uint16(size/4)) // write request size in 4-byte units
	b += 2

	xgb.Put32(buf[b:], uint32(Window))
	b += 4

	buf[b] = Update
	b += 1

	b += 3 // padding

	return buf
}

// Request UnredirectSubwindows
// size: 12
type UnredirectSubwindowsCookie struct {
	*xgb.Cookie
}

// Write request to wire for UnredirectSubwindows
func UnredirectSubwindows(c *xgb.Conn, Window xproto.Window, Update byte) UnredirectSubwindowsCookie {
	cookie := c.NewCookie(false, false)
	c.NewRequest(unredirectSubwindowsRequest(c, Window, Update), cookie)
	return UnredirectSubwindowsCookie{cookie}
}

func UnredirectSubwindowsChecked(c *xgb.Conn, Window xproto.Window, Update byte) UnredirectSubwindowsCookie {
	cookie := c.NewCookie(true, false)
	c.NewRequest(unredirectSubwindowsRequest(c, Window, Update), cookie)
	return UnredirectSubwindowsCookie{cookie}
}

func (cook UnredirectSubwindowsCookie) Check() error {
	return cook.Cookie.Check()
}

// Write request to wire for UnredirectSubwindows
func unredirectSubwindowsRequest(c *xgb.Conn, Window xproto.Window, Update byte) []byte {
	size := 12
	b := 0
	buf := make([]byte, size)

	buf[b] = c.Extensions["COMPOSITE"]
	b += 1

	buf[b] = 4 // request opcode
	b += 1

	xgb.Put16(buf[b:], uint16(size/4)) // write request size in 4-byte units
	b += 2

	xgb.Put32(buf[b:], uint32(Window))
	b += 4

	buf[b] = Update
	b += 1

	b += 3 // padding

	return buf
}

// Request CreateRegionFromBorderClip
// size: 12
type CreateRegionFromBorderClipCookie struct {
	*xgb.Cookie
}

// Write request to wire for CreateRegionFromBorderClip
func CreateRegionFromBorderClip(c *xgb.Conn, Region xfixes.Region, Window xproto.Window) CreateRegionFromBorderClipCookie {
	cookie := c.NewCookie(false, false)
	c.NewRequest(createRegionFromBorderClipRequest(c, Region, Window), cookie)
	return CreateRegionFromBorderClipCookie{cookie}
}

func CreateRegionFromBorderClipChecked(c *xgb.Conn, Region xfixes.Region, Window xproto.Window) CreateRegionFromBorderClipCookie {
	cookie := c.NewCookie(true, false)
	c.NewRequest(createRegionFromBorderClipRequest(c, Region, Window), cookie)
	return CreateRegionFromBorderClipCookie{cookie}
}

func (cook CreateRegionFromBorderClipCookie) Check() error {
	return cook.Cookie.Check()
}

// Write request to wire for CreateRegionFromBorderClip
func createRegionFromBorderClipRequest(c *xgb.Conn, Region xfixes.Region, Window xproto.Window) []byte {
	size := 12
	b := 0
	buf := make([]byte, size)

	buf[b] = c.Extensions["COMPOSITE"]
	b += 1

	buf[b] = 5 // request opcode
	b += 1

	xgb.Put16(buf[b:], uint16(size/4)) // write request size in 4-byte units
	b += 2

	xgb.Put32(buf[b:], uint32(Region))
	b += 4

	xgb.Put32(buf[b:], uint32(Window))
	b += 4

	return buf
}

// Request NameWindowPixmap
// size: 12
type NameWindowPixmapCookie struct {
	*xgb.Cookie
}

// Write request to wire for NameWindowPixmap
func NameWindowPixmap(c *xgb.Conn, Window xproto.Window, Pixmap xproto.Pixmap) NameWindowPixmapCookie {
	cookie := c.NewCookie(false, false)
	c.NewRequest(nameWindowPixmapRequest(c, Window, Pixmap), cookie)
	return NameWindowPixmapCookie{cookie}
}

func NameWindowPixmapChecked(c *xgb.Conn, Window xproto.Window, Pixmap xproto.Pixmap) NameWindowPixmapCookie {
	cookie := c.NewCookie(true, false)
	c.NewRequest(nameWindowPixmapRequest(c, Window, Pixmap), cookie)
	return NameWindowPixmapCookie{cookie}
}

func (cook NameWindowPixmapCookie) Check() error {
	return cook.Cookie.Check()
}

// Write request to wire for NameWindowPixmap
func nameWindowPixmapRequest(c *xgb.Conn, Window xproto.Window, Pixmap xproto.Pixmap) []byte {
	size := 12
	b := 0
	buf := make([]byte, size)

	buf[b] = c.Extensions["COMPOSITE"]
	b += 1

	buf[b] = 6 // request opcode
	b += 1

	xgb.Put16(buf[b:], uint16(size/4)) // write request size in 4-byte units
	b += 2

	xgb.Put32(buf[b:], uint32(Window))
	b += 4

	xgb.Put32(buf[b:], uint32(Pixmap))
	b += 4

	return buf
}

// Request GetOverlayWindow
// size: 8
type GetOverlayWindowCookie struct {
	*xgb.Cookie
}

func GetOverlayWindow(c *xgb.Conn, Window xproto.Window) GetOverlayWindowCookie {
	cookie := c.NewCookie(true, true)
	c.NewRequest(getOverlayWindowRequest(c, Window), cookie)
	return GetOverlayWindowCookie{cookie}
}

func GetOverlayWindowUnchecked(c *xgb.Conn, Window xproto.Window) GetOverlayWindowCookie {
	cookie := c.NewCookie(false, true)
	c.NewRequest(getOverlayWindowRequest(c, Window), cookie)
	return GetOverlayWindowCookie{cookie}
}

// Request reply for GetOverlayWindow
// size: 32
type GetOverlayWindowReply struct {
	Sequence uint16
	Length   uint32
	// padding: 1 bytes
	OverlayWin xproto.Window
	// padding: 20 bytes
}

// Waits and reads reply data from request GetOverlayWindow
func (cook GetOverlayWindowCookie) Reply() (*GetOverlayWindowReply, error) {
	buf, err := cook.Cookie.Reply()
	if err != nil {
		return nil, err
	}
	if buf == nil {
		return nil, nil
	}
	return getOverlayWindowReply(buf), nil
}

// Read reply into structure from buffer for GetOverlayWindow
func getOverlayWindowReply(buf []byte) *GetOverlayWindowReply {
	v := new(GetOverlayWindowReply)
	b := 1 // skip reply determinant

	b += 1 // padding

	v.Sequence = xgb.Get16(buf[b:])
	b += 2

	v.Length = xgb.Get32(buf[b:]) // 4-byte units
	b += 4

	v.OverlayWin = xproto.Window(xgb.Get32(buf[b:]))
	b += 4

	b += 20 // padding

	return v
}

// Write request to wire for GetOverlayWindow
func getOverlayWindowRequest(c *xgb.Conn, Window xproto.Window) []byte {
	size := 8
	b := 0
	buf := make([]byte, size)

	buf[b] = c.Extensions["COMPOSITE"]
	b += 1

	buf[b] = 7 // request opcode
	b += 1

	xgb.Put16(buf[b:], uint16(size/4)) // write request size in 4-byte units
	b += 2

	xgb.Put32(buf[b:], uint32(Window))
	b += 4

	return buf
}

// Request ReleaseOverlayWindow
// size: 8
type ReleaseOverlayWindowCookie struct {
	*xgb.Cookie
}

// Write request to wire for ReleaseOverlayWindow
func ReleaseOverlayWindow(c *xgb.Conn, Window xproto.Window) ReleaseOverlayWindowCookie {
	cookie := c.NewCookie(false, false)
	c.NewRequest(releaseOverlayWindowRequest(c, Window), cookie)
	return ReleaseOverlayWindowCookie{cookie}
}

func ReleaseOverlayWindowChecked(c *xgb.Conn, Window xproto.Window) ReleaseOverlayWindowCookie {
	cookie := c.NewCookie(true, false)
	c.NewRequest(releaseOverlayWindowRequest(c, Window), cookie)
	return ReleaseOverlayWindowCookie{cookie}
}

func (cook ReleaseOverlayWindowCookie) Check() error {
	return cook.Cookie.Check()
}

// Write request to wire for ReleaseOverlayWindow
func releaseOverlayWindowRequest(c *xgb.Conn, Window xproto.Window) []byte {
	size := 8
	b := 0
	buf := make([]byte, size)

	buf[b] = c.Extensions["COMPOSITE"]
	b += 1

	buf[b] = 8 // request opcode
	b += 1

	xgb.Put16(buf[b:], uint16(size/4)) // write request size in 4-byte units
	b += 2

	xgb.Put32(buf[b:], uint32(Window))
	b += 4

	return buf
}
