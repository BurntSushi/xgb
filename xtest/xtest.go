// Package xtest is the X client API for the XTEST extension.
package xtest

/*
	This file was generated by xtest.xml on May 10 2012 8:04:33pm EDT.
	This file is automatically generated. Edit at your peril!
*/

import (
	"github.com/BurntSushi/xgb"

	"github.com/BurntSushi/xgb/xproto"
)

// Init must be called before using the XTEST extension.
func Init(c *xgb.Conn) error {
	reply, err := xproto.QueryExtension(c, 5, "XTEST").Reply()
	switch {
	case err != nil:
		return err
	case !reply.Present:
		return xgb.Errorf("No extension named XTEST could be found on on the server.")
	}

	xgb.ExtLock.Lock()
	c.Extensions["XTEST"] = reply.MajorOpcode
	for evNum, fun := range xgb.NewExtEventFuncs["XTEST"] {
		xgb.NewEventFuncs[int(reply.FirstEvent)+evNum] = fun
	}
	for errNum, fun := range xgb.NewExtErrorFuncs["XTEST"] {
		xgb.NewErrorFuncs[int(reply.FirstError)+errNum] = fun
	}
	xgb.ExtLock.Unlock()

	return nil
}

func init() {
	xgb.NewExtEventFuncs["XTEST"] = make(map[int]xgb.NewEventFun)
	xgb.NewExtErrorFuncs["XTEST"] = make(map[int]xgb.NewErrorFun)
}

// Skipping definition for base type 'Int8'

// Skipping definition for base type 'Card16'

// Skipping definition for base type 'Char'

// Skipping definition for base type 'Card32'

// Skipping definition for base type 'Double'

// Skipping definition for base type 'Bool'

// Skipping definition for base type 'Float'

// Skipping definition for base type 'Card8'

// Skipping definition for base type 'Int16'

// Skipping definition for base type 'Int32'

// Skipping definition for base type 'Void'

// Skipping definition for base type 'Byte'

const (
	CursorNone    = 0
	CursorCurrent = 1
)

// Request GetVersion
// size: 8
type GetVersionCookie struct {
	*xgb.Cookie
}

func GetVersion(c *xgb.Conn, MajorVersion byte, MinorVersion uint16) GetVersionCookie {
	cookie := c.NewCookie(true, true)
	c.NewRequest(getVersionRequest(c, MajorVersion, MinorVersion), cookie)
	return GetVersionCookie{cookie}
}

func GetVersionUnchecked(c *xgb.Conn, MajorVersion byte, MinorVersion uint16) GetVersionCookie {
	cookie := c.NewCookie(false, true)
	c.NewRequest(getVersionRequest(c, MajorVersion, MinorVersion), cookie)
	return GetVersionCookie{cookie}
}

// Request reply for GetVersion
// size: 10
type GetVersionReply struct {
	Sequence     uint16
	Length       uint32
	MajorVersion byte
	MinorVersion uint16
}

// Waits and reads reply data from request GetVersion
func (cook GetVersionCookie) Reply() (*GetVersionReply, error) {
	buf, err := cook.Cookie.Reply()
	if err != nil {
		return nil, err
	}
	if buf == nil {
		return nil, nil
	}
	return getVersionReply(buf), nil
}

// Read reply into structure from buffer for GetVersion
func getVersionReply(buf []byte) *GetVersionReply {
	v := new(GetVersionReply)
	b := 1 // skip reply determinant

	v.MajorVersion = buf[b]
	b += 1

	v.Sequence = xgb.Get16(buf[b:])
	b += 2

	v.Length = xgb.Get32(buf[b:]) // 4-byte units
	b += 4

	v.MinorVersion = xgb.Get16(buf[b:])
	b += 2

	return v
}

// Write request to wire for GetVersion
func getVersionRequest(c *xgb.Conn, MajorVersion byte, MinorVersion uint16) []byte {
	size := 8
	b := 0
	buf := make([]byte, size)

	buf[b] = c.Extensions["XTEST"]
	b += 1

	buf[b] = 0 // request opcode
	b += 1

	xgb.Put16(buf[b:], uint16(size/4)) // write request size in 4-byte units
	b += 2

	buf[b] = MajorVersion
	b += 1

	b += 1 // padding

	xgb.Put16(buf[b:], MinorVersion)
	b += 2

	return buf
}

// Request CompareCursor
// size: 12
type CompareCursorCookie struct {
	*xgb.Cookie
}

func CompareCursor(c *xgb.Conn, Window xproto.Window, Cursor xproto.Cursor) CompareCursorCookie {
	cookie := c.NewCookie(true, true)
	c.NewRequest(compareCursorRequest(c, Window, Cursor), cookie)
	return CompareCursorCookie{cookie}
}

func CompareCursorUnchecked(c *xgb.Conn, Window xproto.Window, Cursor xproto.Cursor) CompareCursorCookie {
	cookie := c.NewCookie(false, true)
	c.NewRequest(compareCursorRequest(c, Window, Cursor), cookie)
	return CompareCursorCookie{cookie}
}

// Request reply for CompareCursor
// size: 8
type CompareCursorReply struct {
	Sequence uint16
	Length   uint32
	Same     bool
}

// Waits and reads reply data from request CompareCursor
func (cook CompareCursorCookie) Reply() (*CompareCursorReply, error) {
	buf, err := cook.Cookie.Reply()
	if err != nil {
		return nil, err
	}
	if buf == nil {
		return nil, nil
	}
	return compareCursorReply(buf), nil
}

// Read reply into structure from buffer for CompareCursor
func compareCursorReply(buf []byte) *CompareCursorReply {
	v := new(CompareCursorReply)
	b := 1 // skip reply determinant

	if buf[b] == 1 {
		v.Same = true
	} else {
		v.Same = false
	}
	b += 1

	v.Sequence = xgb.Get16(buf[b:])
	b += 2

	v.Length = xgb.Get32(buf[b:]) // 4-byte units
	b += 4

	return v
}

// Write request to wire for CompareCursor
func compareCursorRequest(c *xgb.Conn, Window xproto.Window, Cursor xproto.Cursor) []byte {
	size := 12
	b := 0
	buf := make([]byte, size)

	buf[b] = c.Extensions["XTEST"]
	b += 1

	buf[b] = 1 // request opcode
	b += 1

	xgb.Put16(buf[b:], uint16(size/4)) // write request size in 4-byte units
	b += 2

	xgb.Put32(buf[b:], uint32(Window))
	b += 4

	xgb.Put32(buf[b:], uint32(Cursor))
	b += 4

	return buf
}

// Request FakeInput
// size: 36
type FakeInputCookie struct {
	*xgb.Cookie
}

// Write request to wire for FakeInput
func FakeInput(c *xgb.Conn, Type byte, Detail byte, Time uint32, Root xproto.Window, RootX int16, RootY int16, Deviceid byte) FakeInputCookie {
	cookie := c.NewCookie(false, false)
	c.NewRequest(fakeInputRequest(c, Type, Detail, Time, Root, RootX, RootY, Deviceid), cookie)
	return FakeInputCookie{cookie}
}

func FakeInputChecked(c *xgb.Conn, Type byte, Detail byte, Time uint32, Root xproto.Window, RootX int16, RootY int16, Deviceid byte) FakeInputCookie {
	cookie := c.NewCookie(true, false)
	c.NewRequest(fakeInputRequest(c, Type, Detail, Time, Root, RootX, RootY, Deviceid), cookie)
	return FakeInputCookie{cookie}
}

func (cook FakeInputCookie) Check() error {
	return cook.Cookie.Check()
}

// Write request to wire for FakeInput
func fakeInputRequest(c *xgb.Conn, Type byte, Detail byte, Time uint32, Root xproto.Window, RootX int16, RootY int16, Deviceid byte) []byte {
	size := 36
	b := 0
	buf := make([]byte, size)

	buf[b] = c.Extensions["XTEST"]
	b += 1

	buf[b] = 2 // request opcode
	b += 1

	xgb.Put16(buf[b:], uint16(size/4)) // write request size in 4-byte units
	b += 2

	buf[b] = Type
	b += 1

	buf[b] = Detail
	b += 1

	b += 2 // padding

	xgb.Put32(buf[b:], Time)
	b += 4

	xgb.Put32(buf[b:], uint32(Root))
	b += 4

	b += 8 // padding

	xgb.Put16(buf[b:], uint16(RootX))
	b += 2

	xgb.Put16(buf[b:], uint16(RootY))
	b += 2

	b += 7 // padding

	buf[b] = Deviceid
	b += 1

	return buf
}

// Request GrabControl
// size: 8
type GrabControlCookie struct {
	*xgb.Cookie
}

// Write request to wire for GrabControl
func GrabControl(c *xgb.Conn, Impervious bool) GrabControlCookie {
	cookie := c.NewCookie(false, false)
	c.NewRequest(grabControlRequest(c, Impervious), cookie)
	return GrabControlCookie{cookie}
}

func GrabControlChecked(c *xgb.Conn, Impervious bool) GrabControlCookie {
	cookie := c.NewCookie(true, false)
	c.NewRequest(grabControlRequest(c, Impervious), cookie)
	return GrabControlCookie{cookie}
}

func (cook GrabControlCookie) Check() error {
	return cook.Cookie.Check()
}

// Write request to wire for GrabControl
func grabControlRequest(c *xgb.Conn, Impervious bool) []byte {
	size := 8
	b := 0
	buf := make([]byte, size)

	buf[b] = c.Extensions["XTEST"]
	b += 1

	buf[b] = 3 // request opcode
	b += 1

	xgb.Put16(buf[b:], uint16(size/4)) // write request size in 4-byte units
	b += 2

	if Impervious {
		buf[b] = 1
	} else {
		buf[b] = 0
	}
	b += 1

	b += 3 // padding

	return buf
}
